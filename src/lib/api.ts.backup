import { supabase } from './supabase'

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001'

class ApiService {
  private async getAuthHeaders() {
    const { data: { session } } = await supabase.auth.getSession()
    return {
      'Content-Type': 'application/json',
      'Authorization': session?.access_token ? Bearer  : ''
    }
  }

  private async request(endpoint: string, options: RequestInit = {}) {
    const headers = await this.getAuthHeaders()
    
    const config: RequestInit = {
      ...options,
      headers: {
        ...headers,
        ...options.headers
      }
    }

    const response = await fetch(${API_URL}/api, config)
    
    if (!response.ok) {
      const error = await response.json().catch(() => ({ error: 'Network error' }))
      throw new Error(error.error || HTTP )
    }

    return response.json()
  }

  // Authentication
  async register(userData: any) {
    return this.request('/auth/register', {
      method: 'POST',
      body: JSON.stringify(userData)
    })
  }

  async login(email: string, password: string) {
    const { data, error } = await supabase.auth.signInWithPassword({ email, password })
    if (error) throw error
    return data
  }

  async logout() {
    return supabase.auth.signOut()
  }

  // Bookings
  async getBookings(params?: any) {
    const query = params ? ? : ''
    return this.request(/bookings)
  }

  async createBooking(bookingData: any) {
    return this.request('/bookings', {
      method: 'POST',
      body: JSON.stringify(bookingData)
    })
  }

  async getBooking(id: string) {
    return this.request(/bookings/)
  }

  async updateBooking(id: string, updates: any) {
    return this.request(/bookings/, {
      method: 'PUT',
      body: JSON.stringify(updates)
    })
  }

  // Payments
  async createPayment(paymentData: any) {
    return this.request('/payments', {
      method: 'POST',
      body: JSON.stringify(paymentData)
    })
  }

  async confirmPayment(paymentId: string, confirmData: any) {
    return this.request(/payments/, {
      method: 'PUT',
      body: JSON.stringify(confirmData)
    })
  }

  async getPayments() {
    return this.request('/payments')
  }

  // Vehicles
  async getVehicles() {
    return this.request('/vehicles')
  }
}

export const apiService = new ApiService()
